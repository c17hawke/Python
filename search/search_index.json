{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Python \ud83d\udc0d course by Sunny","text":"<p>Watch Complete YouTube playlist here \ud83d\udcfa -</p> <p>Subscribe to my channel \ud83d\udcfa</p> <p>Following is the outline of the course with respective videos and notes \ud83d\udcdd -</p>"},{"location":"#introduction","title":"Introduction","text":""},{"location":"#start-thinking-in-python-","title":"Start thinking in Python \ud83e\udde0 -","text":""},{"location":"#installation","title":"Installation \ud83d\udd27","text":"<p>Detailed installation video \ud83d\udcbb</p>"},{"location":"#introduction-to-python","title":"Introduction to Python \ud83d\udc0d","text":"<ul> <li>What is programming language? \ud83d\udcbb</li> <li>What is Python? \ud83d\udc0d</li> <li>Why Python? \ud83e\udd14</li> <li>What can we do with Python? \ud83d\udd28</li> <li>Drawback of Python? \ud83d\ude15</li> </ul> <p>notes: Introduction to Python notes \ud83d\udcdd</p>"},{"location":"#getting-started","title":"Getting Started \ud83d\ude80","text":"<ul> <li>Hello world! \ud83d\udc4b</li> <li>Comments in python \ud83d\udcac</li> <li>Errors / Exception in python \u274c</li> <li>The difference between Error and Exception with examples \ud83d\udd0d<ul> <li>Error \u274c</li> <li>Exception \u26a0\ufe0f</li> </ul> </li> <li>Explore about the above error messages in chatGPT or Bing Chat \ud83d\udcac</li> </ul> <p>notes - Getting started notes \ud83d\udcdd</p>"},{"location":"#variables","title":"Variables \ud83d\udd24","text":"<ul> <li>Define a Variable \ud83d\udd0d</li> <li>Rules for defining the variables in Python \ud83d\udccf</li> <li>Conventions for defining the variables in Python \ud83d\udcdd</li> <li>Features for defining the variables in Python \ud83d\udd0d</li> <li>More real world examples \ud83c\udf0e</li> </ul> <p>notes - Variable notes \ud83d\udcdd</p>"},{"location":"#data-types","title":"Data Types \ud83d\udcca","text":"<ul> <li>Introduction to data types? \ud83d\udd0d</li> <li>Real-life example from school days \ud83c\udfeb</li> <li>Real-life example from Amazon E-commerce website \ud83d\uded2</li> <li>Hands-on using Python for the above examples \ud83d\udcbb</li> </ul> <p>notes - Data Types notes \ud83d\udcdd | Data Types Hand written notes \ud83d\udcdd</p>"},{"location":"#user-input-data-type-casting-and-conversions","title":"User input, data type casting and conversions","text":"<ul> <li>User-input: Python's inbuilt input method? \ud83d\udce5</li> <li>Why we need type conversions \ud83d\udd0d</li> <li>Handling various data-types and it's conversion \ud83d\udd27<ul> <li>Implicit type conversions aka Data type conversions \ud83d\udd04</li> <li>Explicit type conversions aka Data type casting \ud83c\udf9b\ufe0f</li> </ul> </li> </ul> <p>notes - Data Types notes \ud83d\udcdd</p>"},{"location":"#numbers","title":"Numbers \ud83d\udd22","text":"<ul> <li>Integers \ud83d\udd22<ul> <li>Large integers \ud83d\udd0d</li> </ul> </li> <li>Floats \ud83d\udd1f<ul> <li>Large float values \ud83d\udd0d</li> <li>Scientific notation \ud83d\udd2c</li> </ul> </li> <li>Complex numbers \ud83d\udd22</li> <li>Inbuilt functions/methods for numbers \ud83d\udd27<ul> <li><code>abs</code> (absolute value) \ud83d\udd0d</li> <li><code>divmod</code> (quotient and remainder) \ud83d\udd0d</li> <li><code>pow</code> (power) \ud83d\udd0d</li> <li><code>round</code> (rounding) \ud83d\udd0d</li> </ul> </li> </ul> <p>notes - Numbers notes \ud83d\udcdd</p>"},{"location":"notebooks/000-intro-to-python/notes/","title":"Introduction to Python","text":""},{"location":"notebooks/001-getting-started/notes/","title":"Getting Started \ud83d\ude80","text":"<p>Author: SUNNY BHAVEEN CHANDRA</p> <p>For more information -</p> <ul> <li><p>[1] Python notes- https://c17hawke.github.io/Python/</p> </li> <li><p>[2] Python YouTube Playlist- https://youtube.com/playlist?list=PLrdaCCBhU_hnxIzB7EJlY-pfYOMGRycAK</p> </li> </ul> In\u00a0[1]: Copied! <pre>print(\"Hello, world\")\n</pre> print(\"Hello, world\")  <pre>Hello, world\n</pre> <p>The <code>print()</code> function is a very useful tool in Python that allows you to display information to the user. It\u2019s often used to output text or other data to the screen.</p> <p>To use the <code>print()</code> function, you simply type <code>print()</code> and then put whatever you want to display inside the parentheses. It\u2019s a built-in function, which means that it\u2019s always available for use without having any other dependencies.</p> In\u00a0[2]: Copied! <pre>print(4 + 2)\n</pre> print(4 + 2) <pre>6\n</pre> In\u00a0[3]: Copied! <pre>print(\"Greetings from Sunny!\")\n</pre> print(\"Greetings from Sunny!\") <pre>Greetings from Sunny!\n</pre> In\u00a0[4]: Copied! <pre># This is a comment, can be served as inline documentation for python code snippets\nprint(\"Hello, world\")\n</pre> # This is a comment, can be served as inline documentation for python code snippets print(\"Hello, world\")  <pre>Hello, world\n</pre> In\u00a0[5]: Copied! <pre># This is a comment, can be served as inline documentation for python code snippets\n# print(\"Hello, world\") # No ouput will be seen as this code is commented out\n</pre> # This is a comment, can be served as inline documentation for python code snippets # print(\"Hello, world\") # No ouput will be seen as this code is commented out <p>multiline comments -</p> In\u00a0[6]: Copied! <pre>\"\"\"This is a comment, can be served as \ninline documentation for python code snippets\"\"\"\nprint(\"Hello, world\")\n</pre> \"\"\"This is a comment, can be served as  inline documentation for python code snippets\"\"\" print(\"Hello, world\")  <pre>Hello, world\n</pre> In\u00a0[7]: Copied! <pre>'''The following code is simple a\nmathematical calculation'''\nprint(\"Sum of 4 and 2=\", 4+2)\nprint(\"Product of 4 and 2=\", 4*2)\n</pre> '''The following code is simple a mathematical calculation''' print(\"Sum of 4 and 2=\", 4+2) print(\"Product of 4 and 2=\", 4*2) <pre>Sum of 4 and 2= 6\nProduct of 4 and 2= 8\n</pre> In\u00a0[8]: Copied! <pre># Example of Syntax error\n# observe the error message here\nprint(\"hello, world\"\n</pre> # Example of Syntax error # observe the error message here print(\"hello, world\"  <pre>\n  Cell In[8], line 3\n    print(\"hello, world\"\n                         ^\nSyntaxError: unexpected EOF while parsing\n</pre> In\u00a0[9]: Copied! <pre># The following code will give Syntax error\nprint(\"Product of 4 and 2=\", 4*2\n</pre> # The following code will give Syntax error print(\"Product of 4 and 2=\", 4*2 <pre>\n  Cell In[9], line 2\n    print(\"Product of 4 and 2=\", 4*2\n                                    ^\nSyntaxError: unexpected EOF while parsing\n</pre> In\u00a0[10]: Copied! <pre># Correction user parenthesis\nprint(\"Product of 4 and 2=\", 4*2)\n</pre> # Correction user parenthesis print(\"Product of 4 and 2=\", 4*2) <pre>Product of 4 and 2= 8\n</pre> In\u00a0[11]: Copied! <pre># The following code will give exception Zero Division Error\nprint(\"Division of 4 and 0=\", 4/0)\n</pre> # The following code will give exception Zero Division Error print(\"Division of 4 and 0=\", 4/0) <pre>\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[11], line 2\n      1 # The following code will give exception Zero Division Error\n----&gt; 2 print(\"Division of 4 and 0=\", 4/0)\n\nZeroDivisionError: division by zero</pre> In\u00a0[12]: Copied! <pre>print(\"Sum of 4 and 2=\", 4+2)\nprint(\"Product of 4 and 2=\", 4*2)\n\n# The following code will give Syntax error\nprint(\"Product of 4 and 2=\", 4*2\n\n# The above error will not allow to run the entire program\n</pre>  print(\"Sum of 4 and 2=\", 4+2) print(\"Product of 4 and 2=\", 4*2)  # The following code will give Syntax error print(\"Product of 4 and 2=\", 4*2  # The above error will not allow to run the entire program <pre>\n  Cell In[12], line 7\n    # The above error will not allow to run the entire program\n                                                              ^\nSyntaxError: unexpected EOF while parsing\n</pre> In\u00a0[13]: Copied! <pre>print(\"Sum of 4 and 2=\", 4+2)\nprint(\"Product of 4 and 2=\", 4*2)\n\n# The following code will give exception Zero Division Error\nprint(\"Division of 4 and 0=\", 4/0)\n\n# The above error will only throw an exception at the last line.\n# It will now stop printing the 1st two lines because \n# The code is correct Syntax wise!\n</pre>  print(\"Sum of 4 and 2=\", 4+2) print(\"Product of 4 and 2=\", 4*2)  # The following code will give exception Zero Division Error print(\"Division of 4 and 0=\", 4/0)  # The above error will only throw an exception at the last line. # It will now stop printing the 1st two lines because  # The code is correct Syntax wise! <pre>Sum of 4 and 2= 6\nProduct of 4 and 2= 8\n</pre> <pre>\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[13], line 5\n      2 print(\"Product of 4 and 2=\", 4*2)\n      4 # The following code will give exception Zero Division Error\n----&gt; 5 print(\"Division of 4 and 0=\", 4/0)\n      7 # The above error will only throw an exception at the last line.\n      8 # It will now stop printing the 1st two lines because \n      9 # The code is correct Syntax wise!\n\nZeroDivisionError: division by zero</pre>"},{"location":"notebooks/001-getting-started/notes/#getting-started","title":"Getting Started \ud83d\ude80\u00b6","text":"<p>Python is a versatile programming language that is high-level and dynamically typed. It's often considered similar to pseudocode due to its readability and ability to convey complex ideas with minimal code.</p>"},{"location":"notebooks/001-getting-started/notes/#hello-world","title":"Hello world! \ud83d\udc4b\u00b6","text":""},{"location":"notebooks/001-getting-started/notes/#comments-in-python","title":"Comments in python \ud83d\udcac\u00b6","text":""},{"location":"notebooks/001-getting-started/notes/#errors-exception-in-python","title":"Errors / Exception in python \u274c\u00b6","text":"<p>When something goes wrong in your Python code, an error or exception occurs.</p> <ul> <li>An error is a mistake in the code that prevents the program from running correctly.</li> <li>An exception, on the other hand, is an event that occurs during the execution of a program that disrupts the normal flow of the program's instructions.</li> </ul> <p>We will learn about them by observing throughout the course</p>"},{"location":"notebooks/001-getting-started/notes/#observe-the-difference-between-error-and-exception-in-the-following-examples","title":"OBSERVE: The difference between Error and Exception in the following examples\u00b6","text":""},{"location":"notebooks/001-getting-started/notes/#error","title":"Error \u274c\u00b6","text":""},{"location":"notebooks/001-getting-started/notes/#exception","title":"Exception \u26a0\ufe0f\u00b6","text":""},{"location":"notebooks/001-getting-started/notes/#explore-about-the-above-error-messages-in-chatgpt-or-bing-chat","title":"Explore about the above error messages in chatGPT or Bing Chat \ud83d\udcac\u00b6","text":"<p>in order to get quick undersatanding about them if you get stuck later while writing your own program -</p>"},{"location":"notebooks/001-getting-started/notes/#an-example-shown-below-","title":"An example shown below -\u00b6","text":"<p>BingChat - https://www.bing.com/search?q=Bing+AI&amp;showconv=1&amp;FORM=hpcodx</p>"},{"location":"notebooks/002-variables-in-python/notes/","title":"Variables \ud83d\udd24","text":"<p>Author: SUNNY BHAVEEN CHANDRA</p> <p>For more information -</p> <ul> <li><p>[1] Python notes- https://c17hawke.github.io/Python/</p> </li> <li><p>[2] Python YouTube Playlist- https://youtube.com/playlist?list=PLrdaCCBhU_hnxIzB7EJlY-pfYOMGRycAK</p> </li> </ul> In\u00a0[1]: Copied! <pre># let x be 100\n\nx = 100\nprint(x)\n</pre> # let x be 100  x = 100 print(x) <pre>100\n</pre> In\u00a0[2]: Copied! <pre>x = 5\nprint(\"Twice of a num\", x * 2)\n</pre> x = 5 print(\"Twice of a num\", x * 2) <pre>Twice of a num 10\n</pre> In\u00a0[3]: Copied! <pre>lecture = \"Introduction to python\"\nprint(\"This is a lecture of:\", lecture)\n</pre> lecture = \"Introduction to python\" print(\"This is a lecture of:\", lecture) <pre>This is a lecture of: Introduction to python\n</pre> <p>NOTE: f-string way to write above statement - (Most frequently used)</p> In\u00a0[4]: Copied! <pre>print(f\"This is a lecture of: {lecture}\") # do not forget f in the beginning\n</pre> print(f\"This is a lecture of: {lecture}\") # do not forget f in the beginning  <pre>This is a lecture of: Introduction to python\n</pre> In\u00a0[5]: Copied! <pre>name = \"Sunny\"\nprint(f\"My name is: {name}\")\nage = 52\nprint(f\"My age is: {age}\")\nprint(f\"My name is {name} and My age is {age} years\")\n</pre> name = \"Sunny\" print(f\"My name is: {name}\") age = 52 print(f\"My age is: {age}\") print(f\"My name is {name} and My age is {age} years\") <pre>My name is: Sunny\nMy age is: 52\nMy name is Sunny and My age is 52 years\n</pre> In\u00a0[6]: Copied! <pre># write a table of a no. upto 10\nx = 5\nprint(f\"showing table of: {x}\")\nprint(f\"{x} x 1  = {x * 1}\")\nprint(f\"{x} x 2  = {x * 2}\")\nprint(f\"{x} x 3  = {x * 3}\")\nprint(f\"{x} x 4  = {x * 4}\")\nprint(f\"{x} x 5  = {x * 5}\")\nprint(f\"{x} x 6  = {x * 6}\")\nprint(f\"{x} x 7  = {x * 7}\")\nprint(f\"{x} x 8  = {x * 8}\")\nprint(f\"{x} x 9  = {x * 9}\")\nprint(f\"{x} x 10 = {x * 10}\")\n</pre> # write a table of a no. upto 10 x = 5 print(f\"showing table of: {x}\") print(f\"{x} x 1  = {x * 1}\") print(f\"{x} x 2  = {x * 2}\") print(f\"{x} x 3  = {x * 3}\") print(f\"{x} x 4  = {x * 4}\") print(f\"{x} x 5  = {x * 5}\") print(f\"{x} x 6  = {x * 6}\") print(f\"{x} x 7  = {x * 7}\") print(f\"{x} x 8  = {x * 8}\") print(f\"{x} x 9  = {x * 9}\") print(f\"{x} x 10 = {x * 10}\") <pre>showing table of: 5\n5 x 1  = 5\n5 x 2  = 10\n5 x 3  = 15\n5 x 4  = 20\n5 x 5  = 25\n5 x 6  = 30\n5 x 7  = 35\n5 x 8  = 40\n5 x 9  = 45\n5 x 10 = 50\n</pre> In\u00a0[7]: Copied! <pre># Correct variable names as per above rule\nmy_variable = 10\nmy_variable_1 = 20\nMyVariable_1 = 20\n_variable = 200\n</pre> # Correct variable names as per above rule my_variable = 10 my_variable_1 = 20 MyVariable_1 = 20 _variable = 200  In\u00a0[8]: Copied! <pre># against the rule above\n1_variable = 100 # This will raise a SyntaxError\n</pre>  # against the rule above 1_variable = 100 # This will raise a SyntaxError <pre>\n  Cell In[8], line 2\n    1_variable = 100 # This will raise a SyntaxError\n     ^\nSyntaxError: invalid decimal literal\n</pre> In\u00a0[9]: Copied! <pre>my_variable_@ = 20 # This will raise a SyntaxError\n</pre> my_variable_@ = 20 # This will raise a SyntaxError  <pre>\n  Cell In[9], line 1\n    my_variable_@ = 20 # This will raise a SyntaxError\n                  ^\nSyntaxError: invalid syntax\n</pre> <ol> <li>Variable names are case-sensitive.</li> </ol> In\u00a0[10]: Copied! <pre># These are two different variables\nmy_variable = 10\nmy_Variable = 20\n\nprint(my_variable)\nprint(my_Variable)\n</pre> # These are two different variables my_variable = 10 my_Variable = 20  print(my_variable) print(my_Variable) <pre>10\n20\n</pre> <ol> <li>Variable names cannot be the same as Python keywords or inbuilt function.</li> </ol> <p>NOTE: Think of keywords as a vocabulary of python language.</p> In\u00a0[11]: Copied! <pre># You can check the list of Python keywords using the keyword module\nimport keyword\nprint(keyword.kwlist)\n</pre>  # You can check the list of Python keywords using the keyword module import keyword print(keyword.kwlist) <pre>['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n</pre> In\u00a0[12]: Copied! <pre># to print the builtins present in python\nimport builtins\nprint(dir(builtins))\n</pre> # to print the builtins present in python import builtins print(dir(builtins)) <pre>['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__IPYTHON__', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'display', 'divmod', 'enumerate', 'eval', 'exec', 'execfile', 'filter', 'float', 'format', 'frozenset', 'get_ipython', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'runfile', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n</pre> In\u00a0[13]: Copied! <pre># against the above rule\nprint = 12\nprint(print) # type error\n</pre> # against the above rule print = 12 print(print) # type error <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[13], line 3\n      1 # against the above rule\n      2 print = 12\n----&gt; 3 print(print) # type error\n\nTypeError: 'int' object is not callable</pre> In\u00a0[14]: Copied! <pre># Invalid variable name\nfor = 10 # This will raise a SyntaxError\n</pre> # Invalid variable name for = 10 # This will raise a SyntaxError  <pre>\n  Cell In[14], line 2\n    for = 10 # This will raise a SyntaxError\n        ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[15]: Copied! <pre># ! WARNING: Only use in Jupyter notebooks -\ndel print # deleting the instance of print in jupyter notebook only\n</pre> # ! WARNING: Only use in Jupyter notebooks - del print # deleting the instance of print in jupyter notebook only In\u00a0[16]: Copied! <pre>p = 10\nprint(p) # Now it works\n</pre> p = 10 print(p) # Now it works <pre>10\n</pre> In\u00a0[17]: Copied! <pre>_variable = 200 # it gets grayed out as by some IDEs\n</pre> _variable = 200 # it gets grayed out as by some IDEs <ol> <li>Generally names of variables should start with small letters</li> </ol> In\u00a0[18]: Copied! <pre>variable = 200\nx_val = 100\n</pre> variable = 200 x_val = 100 <ol> <li>Name of constants or the values that you do not wish to change in the program are constants</li> </ol> In\u00a0[19]: Copied! <pre>PI = 3.14\nradius = 3\narea_of_circle = PI * radius * radius\n# area_of_circle = PI * radius ** 2 # same as above \nprint(f\"Area of circle with radius: {radius} is {area_of_circle} unit-square\")\n</pre> PI = 3.14 radius = 3 area_of_circle = PI * radius * radius # area_of_circle = PI * radius ** 2 # same as above  print(f\"Area of circle with radius: {radius} is {area_of_circle} unit-square\") <pre>Area of circle with radius: 3 is 28.259999999999998 unit-square\n</pre> In\u00a0[20]: Copied! <pre># You can directly assign a value to a variable\nx = 2\ny = \"sample text\"\n</pre> # You can directly assign a value to a variable x = 2 y = \"sample text\" In\u00a0[21]: Copied! <pre># advance - TYPE hinting\nx: int = 2\ny: str = \"example text\"\n</pre> # advance - TYPE hinting x: int = 2 y: str = \"example text\" <ol> <li>You can assign values to multiple variables in one line.</li> </ol> In\u00a0[22]: Copied! <pre>x, y, z = 10, 20, 30\n\nprint(x, y, z)\n\n# This is equivalent to:\nx = 10\ny = 20\nz = 30\n\nprint(x, y, z)\n</pre> x, y, z = 10, 20, 30  print(x, y, z)  # This is equivalent to: x = 10 y = 20 z = 30  print(x, y, z)  <pre>10 20 30\n10 20 30\n</pre> In\u00a0[23]: Copied! <pre>length = 10\nwidth = 20\n\narea_of_rectangle = length * width\nperimeter = 2 * (length + width)\n\nprint(f\"for rectangle with length: {length} and width: {width}\")\nprint(f\"area of rectangle = {area_of_rectangle}\")\nprint(f\"Perimeter of rectangle = {perimeter}\")\n</pre> length = 10 width = 20  area_of_rectangle = length * width perimeter = 2 * (length + width)  print(f\"for rectangle with length: {length} and width: {width}\") print(f\"area of rectangle = {area_of_rectangle}\") print(f\"Perimeter of rectangle = {perimeter}\")  <pre>for rectangle with length: 10 and width: 20\narea of rectangle = 200\nPerimeter of rectangle = 60\n</pre> In\u00a0[24]: Copied! <pre># More real world examples -\n\ncost_of_shirt = 600\nunits_to_purchase = 3\n\namount_payable = cost_of_shirt * units_to_purchase\nprint(f\"Cost of 1 shirt: {cost_of_shirt}\")\nprint(f\"Units to purchase: {units_to_purchase}\")\nprint(f\"Amount payable (in INR): {amount_payable}\")\n</pre> # More real world examples -  cost_of_shirt = 600 units_to_purchase = 3  amount_payable = cost_of_shirt * units_to_purchase print(f\"Cost of 1 shirt: {cost_of_shirt}\") print(f\"Units to purchase: {units_to_purchase}\") print(f\"Amount payable (in INR): {amount_payable}\")  <pre>Cost of 1 shirt: 600\nUnits to purchase: 3\nAmount payable (in INR): 1800\n</pre>"},{"location":"notebooks/002-variables-in-python/notes/#variables","title":"Variables \ud83d\udd24\u00b6","text":"<ul> <li>In programming languages, a variable is a name used to identify a value.</li> <li>Developers use variables to make their code more readable and understandable, like using names in natural language.</li> <li>Technically speaking, variables in Python are values that can change during the execution of a program.</li> <li>A variable is used to store a value that may change as needed.</li> <li>In Python, there is no need to explicitly declare a variable. As soon as you assign a value to it, the variable is considered declared.</li> </ul>"},{"location":"notebooks/002-variables-in-python/notes/#define-a-variable-","title":"Define a Variable \ud83d\udd0d-\u00b6","text":"<p>In Python, a variable is defined by assigning a value to it. Unlike some other programming languages, there is no need to declare a variable before assigning a value to it.</p>"},{"location":"notebooks/002-variables-in-python/notes/#rules-for-defining-the-variables-in-python-","title":"Rules for defining the variables in Python \ud83d\udccf-\u00b6","text":"<ol> <li>Variable names can contain letters, numbers, and underscores only (A-Z, a-z, 0-9, and _ ), but cannot start with a number.</li> </ol>"},{"location":"notebooks/002-variables-in-python/notes/#conventions","title":"Conventions \ud83d\udcdd\u00b6","text":"<ol> <li>following is an example of declaring a hidden variable</li> </ol>"},{"location":"notebooks/002-variables-in-python/notes/#features","title":"Features \ud83d\udd0d\u00b6","text":"<ol> <li>There is no need to declare a variable before assigning a value to it.</li> </ol> <p>example in other languages like C or C++</p> <pre>int x = 2;\n</pre>"},{"location":"notebooks/002-variables-in-python/notes/#more-real-world-examples","title":"More real world examples \ud83c\udf0e\u00b6","text":""},{"location":"notebooks/003-data-types/notes/","title":"Data-types \ud83d\udcca","text":"<p>Author: SUNNY BHAVEEN CHANDRA</p> <p>For more information -</p> <ul> <li><p>[1] Python notes- https://c17hawke.github.io/Python/</p> </li> <li><p>[2] Python YouTube Playlist- https://youtube.com/playlist?list=PLrdaCCBhU_hnxIzB7EJlY-pfYOMGRycAK</p> </li> </ul> In\u00a0[1]: Copied! <pre>name = \"Sunny\"\nprint(name)\nprint(type(name))\n</pre> name = \"Sunny\" print(name) print(type(name)) <pre>Sunny\n&lt;class 'str'&gt;\n</pre> In\u00a0[2]: Copied! <pre>sentence = \"Sunny is a life long student\"\nprint(sentence)\nprint(type(sentence))\n</pre>  sentence = \"Sunny is a life long student\" print(sentence) print(type(sentence)) <pre>Sunny is a life long student\n&lt;class 'str'&gt;\n</pre> In\u00a0[3]: Copied! <pre>sentence = 'single quote example'\nprint(sentence)\nprint(type(sentence))\n</pre> sentence = 'single quote example' print(sentence) print(type(sentence)) <pre>single quote example\n&lt;class 'str'&gt;\n</pre> In\u00a0[4]: Copied! <pre>character = \"S\"\nprint(character)\nprint(type(character))\n</pre> character = \"S\" print(character) print(type(character)) <pre>S\n&lt;class 'str'&gt;\n</pre> In\u00a0[5]: Copied! <pre>x = \"1234\"\nprint(x)\nprint(type(x))\n</pre> x = \"1234\" print(x) print(type(x))   <pre>1234\n&lt;class 'str'&gt;\n</pre> In\u00a0[6]: Copied! <pre>x = \"12.34\"\nprint(x)\nprint(type(x))\n</pre> x = \"12.34\" print(x) print(type(x))  <pre>12.34\n&lt;class 'str'&gt;\n</pre> In\u00a0[7]: Copied! <pre>x = 1234\nprint(x)\nprint(type(x))\n</pre> x = 1234 print(x) print(type(x)) <pre>1234\n&lt;class 'int'&gt;\n</pre> In\u00a0[8]: Copied! <pre>x = -1234\nprint(x)\nprint(type(x))\n</pre> x = -1234 print(x) print(type(x)) <pre>-1234\n&lt;class 'int'&gt;\n</pre> In\u00a0[9]: Copied! <pre>x = 0\nprint(x)\nprint(type(x))\n</pre> x = 0 print(x) print(type(x)) <pre>0\n&lt;class 'int'&gt;\n</pre> In\u00a0[10]: Copied! <pre>x = 12.34\nprint(x)\nprint(type(x))\n</pre> x = 12.34 print(x) print(type(x)) <pre>12.34\n&lt;class 'float'&gt;\n</pre> In\u00a0[11]: Copied! <pre>x = -12.34\nprint(x)\nprint(type(x))\n</pre> x = -12.34 print(x) print(type(x)) <pre>-12.34\n&lt;class 'float'&gt;\n</pre> In\u00a0[12]: Copied! <pre>x = 0.0\nprint(x)\nprint(type(x))\n</pre> x = 0.0 print(x) print(type(x)) <pre>0.0\n&lt;class 'float'&gt;\n</pre> In\u00a0[13]: Copied! <pre>z = 1 + 2j\nprint(z)\nprint(type(z))\nprint(f\"real part of {z} =&gt; {z.real}\")\nprint(f\"imaginary part of {z} =&gt; {z.imag}\")\n</pre> z = 1 + 2j print(z) print(type(z)) print(f\"real part of {z} =&gt; {z.real}\") print(f\"imaginary part of {z} =&gt; {z.imag}\") <pre>(1+2j)\n&lt;class 'complex'&gt;\nreal part of (1+2j) =&gt; 1.0\nimaginary part of (1+2j) =&gt; 2.0\n</pre> In\u00a0[14]: Copied! <pre>x = [1,2,3,4,5,6,7,8,9,10]\nprint(x)\nprint(type(x))\n</pre> x = [1,2,3,4,5,6,7,8,9,10] print(x) print(type(x)) <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n&lt;class 'list'&gt;\n</pre> In\u00a0[15]: Copied! <pre>x = [\"item1\", \"item2\", \"item3\"]\nprint(type(x))\n</pre> x = [\"item1\", \"item2\", \"item3\"] print(type(x)) <pre>&lt;class 'list'&gt;\n</pre> In\u00a0[16]: Copied! <pre>x = (1,2,3,4,5,6,7,8,9,10)\nprint(x)\nprint(type(x))\n</pre> x = (1,2,3,4,5,6,7,8,9,10) print(x) print(type(x)) In\u00a0[17]: Copied! <pre>x = (\"item1\", \"item2\", \"item3\")\nprint(type(x))\n</pre> x = (\"item1\", \"item2\", \"item3\") print(type(x)) <pre>&lt;class 'tuple'&gt;\n</pre> In\u00a0[18]: Copied! <pre>x = {\n    \"key\": \"value\",\n    \"key_1\": \"value_1\",\n}\n\nprint(type(x))\n</pre> x = {     \"key\": \"value\",     \"key_1\": \"value_1\", }  print(type(x)) <pre>&lt;class 'dict'&gt;\n</pre> In\u00a0[19]: Copied! <pre>x = {1,2,3,4,5,6,7,8,9,10}\nprint(x)\nprint(type(x))\n\nx = {1,2,3,4,5,6,7,8,9,9,9,9,9,9,10}\nprint(x)\nprint(type(x))\n</pre> x = {1,2,3,4,5,6,7,8,9,10} print(x) print(type(x))  x = {1,2,3,4,5,6,7,8,9,9,9,9,9,9,10} print(x) print(type(x)) <pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n&lt;class 'set'&gt;\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n&lt;class 'set'&gt;\n</pre> In\u00a0[20]: Copied! <pre>x = True\nprint(x)\nprint(type(x))\n</pre> x = True print(x) print(type(x)) <pre>True\n&lt;class 'bool'&gt;\n</pre> In\u00a0[21]: Copied! <pre>x = False\nprint(x)\nprint(type(x))\n</pre> x = False print(x) print(type(x)) <pre>False\n&lt;class 'bool'&gt;\n</pre> In\u00a0[22]: Copied! <pre>x = None\nprint(x)\nprint(type(x))\n</pre> x = None print(x) print(type(x)) <pre>None\n&lt;class 'NoneType'&gt;\n</pre> In\u00a0[23]: Copied! <pre>name_of_student = \"Sunny\"\nprint(name_of_student)\nprint(type(name_of_student))\n</pre> name_of_student = \"Sunny\" print(name_of_student) print(type(name_of_student)) <pre>Sunny\n&lt;class 'str'&gt;\n</pre> In\u00a0[24]: Copied! <pre>roll_no = 12\nprint(roll_no)\nprint(type(roll_no))\n</pre> roll_no = 12 print(roll_no) print(type(roll_no)) <pre>12\n&lt;class 'int'&gt;\n</pre> In\u00a0[25]: Copied! <pre>percentage_of_marks = 75.2\nprint(percentage_of_marks)\nprint(type(percentage_of_marks))\n</pre> percentage_of_marks = 75.2 print(percentage_of_marks) print(type(percentage_of_marks)) <pre>75.2\n&lt;class 'float'&gt;\n</pre> In\u00a0[26]: Copied! <pre>student_1_data = {\n    \"name_of_student\": \"Sunny\",\n    \"roll_no\": 12,\n    \"percentage_of_marks\": 75.2\n}\nprint(student_1_data)\nprint(type(student_1_data))\n</pre> student_1_data = {     \"name_of_student\": \"Sunny\",     \"roll_no\": 12,     \"percentage_of_marks\": 75.2 } print(student_1_data) print(type(student_1_data)) <pre>{'name_of_student': 'Sunny', 'roll_no': 12, 'percentage_of_marks': 75.2}\n&lt;class 'dict'&gt;\n</pre> In\u00a0[27]: Copied! <pre>list_of_subjects = [\n    \"English\", \n    \"Maths\", \n    \"Science\", \n    \"Social Science\", \n    \"Hindi\"\n    ]\nprint(list_of_subjects)\nprint(type(list_of_subjects))\n</pre> list_of_subjects = [     \"English\",      \"Maths\",      \"Science\",      \"Social Science\",      \"Hindi\"     ] print(list_of_subjects) print(type(list_of_subjects)) <pre>['English', 'Maths', 'Science', 'Social Science', 'Hindi']\n&lt;class 'list'&gt;\n</pre> In\u00a0[28]: Copied! <pre>passing_status = False\nprint(passing_status)\nprint(type(passing_status))\n</pre> passing_status = False print(passing_status) print(type(passing_status)) <pre>False\n&lt;class 'bool'&gt;\n</pre> In\u00a0[29]: Copied! <pre>practical_marks_in_English = None\nprint(practical_marks_in_English)\nprint(type(practical_marks_in_English))\n</pre> practical_marks_in_English = None print(practical_marks_in_English) print(type(practical_marks_in_English)) <pre>None\n&lt;class 'NoneType'&gt;\n</pre> In\u00a0[30]: Copied! <pre>name_of_product = \"Hands on Machine Learning\"\ncost_of_product = 3000\none_day_delivery = False\nrating_of_product = 4.7\nreviews_of_product = [\n    \"Book is good\",\n    \"Book is average\",\n    \"Book is excellent\"\n]\n\nproduct_info = {\n    \"name_of_product\": \"Hands on Machine Learning\",\n    \"cost_of_product\": 3000,\n    \"one_day_delivery\": False,\n    \"rating_of_product\": 4.7,\n    \"reviews_of_product\": [\n                        \"Book is good\",\n                        \"Book is average\",\n                        \"Book is excellent\"\n                    ]\n}\n</pre> name_of_product = \"Hands on Machine Learning\" cost_of_product = 3000 one_day_delivery = False rating_of_product = 4.7 reviews_of_product = [     \"Book is good\",     \"Book is average\",     \"Book is excellent\" ]  product_info = {     \"name_of_product\": \"Hands on Machine Learning\",     \"cost_of_product\": 3000,     \"one_day_delivery\": False,     \"rating_of_product\": 4.7,     \"reviews_of_product\": [                         \"Book is good\",                         \"Book is average\",                         \"Book is excellent\"                     ] }"},{"location":"notebooks/003-data-types/notes/#data-types","title":"Data-types \ud83d\udcca\u00b6","text":"<ul> <li>In programming, the concept of data type is crucial. A data type defines the kind of value a variable can hold and the operations that can be performed on it.</li> <li>Python, like many other programming languages, has several built-in data types that are used to handle common data such as<ul> <li>numbers,</li> <li>text, and</li> <li>collections of items.</li> </ul> </li> <li>These data types are the building blocks of any program and understanding them is essential for writing efficient and effective code.</li> </ul> <p>Python has several built-in data types, which fall into the following categories:</p> Category Common Data Types Description Text <code>str</code> text Numeric <code>int</code>, <code>float</code>, <code>complex</code> numbers Sequence <code>list</code>, <code>tuple</code>, <code>range</code> collection of items Mapping <code>dict</code> collection of items Set <code>set</code> collection of items Boolean <code>bool</code> boolean None <code>NoneType</code> NA/NULL type"},{"location":"notebooks/003-data-types/notes/#lets-identify-the-type-of-different-variables-","title":"Let's Identify the type of different variables \ud83d\udd0d-\u00b6","text":"<p>by using inbuilt <code>type()</code> function:</p>"},{"location":"notebooks/003-data-types/notes/#text-category","title":"Text category \ud83d\udcc3\u00b6","text":"Category Common Data Types Description Text <code>str</code> text"},{"location":"notebooks/003-data-types/notes/#string-data-type","title":"<code>string</code> data-type\u00b6","text":"<ul> <li>Anything which is inside a double or single quotes will be treated as string in python</li> <li>examples can be (in a double or single quotes)<ul> <li>a single character,</li> <li>a word,</li> <li>a sentence, or</li> <li>a number,</li> </ul> </li> </ul>"},{"location":"notebooks/003-data-types/notes/#numeric-category","title":"Numeric category \ud83d\udd22\u00b6","text":"Category Common Data Types Description Numeric <code>int</code>, <code>float</code>, <code>complex</code> numbers"},{"location":"notebooks/003-data-types/notes/#int-data-type","title":"<code>int</code> data type\u00b6","text":"<ul> <li><code>int</code> represents a pure integers it can be negative or positive integers</li> </ul>"},{"location":"notebooks/003-data-types/notes/#float-data-type","title":"<code>float</code> data type\u00b6","text":"<ul> <li><code>float</code> represents a pure decimal numbers it can be positive or negative decimal numbers</li> </ul>"},{"location":"notebooks/003-data-types/notes/#complex-data-type","title":"<code>complex</code> data-type\u00b6","text":"<ul> <li><code>complex</code> represents a complex numbers</li> </ul> <p>Reference</p>"},{"location":"notebooks/003-data-types/notes/#sequence-category","title":"Sequence category \ud83d\udcda\u00b6","text":"Category Common Data Types Description Sequence <code>list</code>, <code>tuple</code>, <code>range</code> collection of items"},{"location":"notebooks/003-data-types/notes/#list-data-type","title":"<code>list</code> data-type\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#tuple-data-type","title":"<code>tuple</code> data-type\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#mapping-category","title":"Mapping category \ud83d\uddfa\ufe0f\u00b6","text":"Category Common Data Types Description Mapping <code>dict</code> collection of items"},{"location":"notebooks/003-data-types/notes/#dict-data-type","title":"<code>dict</code> data-type\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#set-category","title":"Set category \ud83c\udfb2\u00b6","text":"Category Common Data Types Description Set <code>set</code> collection of items"},{"location":"notebooks/003-data-types/notes/#set-data-type","title":"<code>set</code> data-type\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#boolean-category","title":"Boolean category \ud83d\udca1\u00b6","text":"Category Common Data Types Description Boolean <code>bool</code> boolean"},{"location":"notebooks/003-data-types/notes/#bool-data-type","title":"<code>bool</code> data-type\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#nonenull-category","title":"None/Null category \ud83d\udd73\ufe0f\u00b6","text":"Category Common Data Types Description None <code>NoneType</code> NA/NULL type"},{"location":"notebooks/003-data-types/notes/#nonetype-data-type","title":"<code>NoneType</code> data-type\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#example-from-school-records-or-marksheets","title":"Example from School records or marksheets \ud83c\udfeb\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#example-from-amazon-ecommerce-website-","title":"Example from Amazon Ecommerce website \ud83d\uded2-\u00b6","text":""},{"location":"notebooks/003-data-types/notes/#assignment-find-out-the-data-type-of-each-variable-above-as-an-assignment","title":"ASSIGNMENT: Find out the data-type of each variable above as an assignment\u00b6","text":""},{"location":"notebooks/004-type-conversions-user-input/notes/","title":"User input, Data-type casting/conversions \ud83d\udd0d","text":"<p>Author: SUNNY BHAVEEN CHANDRA</p> <p>For more information -</p> <ul> <li><p>[1] Python notes- https://c17hawke.github.io/Python/</p> </li> <li><p>[2] Python YouTube Playlist- https://youtube.com/playlist?list=PLrdaCCBhU_hnxIzB7EJlY-pfYOMGRycAK</p> </li> </ul> In\u00a0[1]: Copied! <pre>name = \"SUNNY BHAVEEN CHANDRA\"\nlecture = input(\"Name of the lecture?: \")\n\nprint(f\"Hello, everyone! My name is: {name}\")\nprint(f\"Welcome to the lecture of: {lecture}\")\n</pre> name = \"SUNNY BHAVEEN CHANDRA\" lecture = input(\"Name of the lecture?: \")  print(f\"Hello, everyone! My name is: {name}\") print(f\"Welcome to the lecture of: {lecture}\") <pre>Name of the lecture?: SUNNY BHAVEEN CHANDRA\nHello, everyone! My name is: SUNNY BHAVEEN CHANDRA\nWelcome to the lecture of: SUNNY BHAVEEN CHANDRA\n</pre> In\u00a0[2]: Copied! <pre>print(type(lecture))\n</pre> print(type(lecture)) <pre>&lt;class 'str'&gt;\n</pre> <p>The main use of user input in Python is to allow users to interact with the program and provide information in runtime so that the program can use to perform specific tasks.</p> <p>For example, a program might ask the user for their name and then use that information to personalize a greeting message as show above.</p> <p>User input can also be used to control the flow of a program.</p> <p>NOTE: You can use input function without using prompts but it is not recommended as the user will be confused what to enter.</p> In\u00a0[3]: Copied! <pre>x = input() # without prompt\nprint(x)\n</pre> x = input() # without prompt print(x) <pre>12\n12\n</pre> In\u00a0[4]: Copied! <pre># let's provide a prompt to the user to give some context-\nx = input(\"Enter your age: \")\nprint(x)\n</pre> # let's provide a prompt to the user to give some context- x = input(\"Enter your age: \") print(x) <pre>Enter your age: 24\n24\n</pre> In\u00a0[5]: Copied! <pre>print(f\"You entered: {x}\")\nprint(f\"type of data entered: {type(x)}\")\n</pre> print(f\"You entered: {x}\") print(f\"type of data entered: {type(x)}\")  <pre>You entered: 24\ntype of data entered: &lt;class 'str'&gt;\n</pre> In\u00a0[6]: Copied! <pre>N = 5\nprint(f\"Age after {n} years: {age + N}\") # throws error\n</pre> N = 5 print(f\"Age after {n} years: {age + N}\") # throws error <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 print(f\"Age after 5 years: {x + 5}\") # throws error\n\nTypeError: can only concatenate str (not \"int\") to str</pre> <p>The above example leads us to the topic of type casting in python or conversion of one data type to another.</p> In\u00a0[7]: Copied! <pre># int + float = float\n\nx = 24 # int\ny = 37.4 # float\nz = x + y \n\nz\n</pre> # int + float = float  x = 24 # int y = 37.4 # float z = x + y   z  Out[7]: <pre>61.4</pre> In\u00a0[8]: Copied! <pre>print(f\" x  +  y  =  z \")\nprint(f\"{x} + {y} = {z}\")\n\n# mathematically allowed\n</pre> print(f\" x  +  y  =  z \") print(f\"{x} + {y} = {z}\")  # mathematically allowed  <pre> x  +  y  =  z \n24 + 37.4 = 61.4\n</pre> In\u00a0[9]: Copied! <pre>print(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n</pre> print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") <pre>type of x: &lt;class 'int'&gt;\ntype of y: &lt;class 'float'&gt;\ntype of z: &lt;class 'float'&gt;\n</pre> In\u00a0[10]: Copied! <pre># int * float = float\nx = 24\ny = 37.4\nz = x * y\nprint(f\" x  *  y  =  z \")\nprint(f\"{x} * {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n# mathematically allowed\n</pre> # int * float = float x = 24 y = 37.4 z = x * y print(f\" x  *  y  =  z \") print(f\"{x} * {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") # mathematically allowed  <pre> x  *  y  =  z \n24 * 37.4 = 897.5999999999999\ntype of x: &lt;class 'int'&gt;\ntype of y: &lt;class 'float'&gt;\ntype of z: &lt;class 'float'&gt;\n</pre> In\u00a0[11]: Copied! <pre># int / int = float\nx = 24\ny = 37\nz = x / y\nprint(f\" x  /  y  =  z \")\nprint(f\"{x} / {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n# mathematically allowed\n\n# simpel representation\n24/37\n</pre> # int / int = float x = 24 y = 37 z = x / y print(f\" x  /  y  =  z \") print(f\"{x} / {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") # mathematically allowed  # simpel representation 24/37 <pre> x  /  y  =  z \n24 / 37 = 0.6486486486486487\ntype of x: &lt;class 'int'&gt;\ntype of y: &lt;class 'int'&gt;\ntype of z: &lt;class 'float'&gt;\n</pre> Out[11]: <pre>0.6486486486486487</pre> In\u00a0[12]: Copied! <pre># int + complex = complex\nx = 24\ny = 37.4 + 2j\nz = x + y\nprint(f\" x  +  y  =  z \")\nprint(f\"{x} + {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n# mathematically allowed\n\n24 + 37.4 + 2j\n</pre> # int + complex = complex x = 24 y = 37.4 + 2j z = x + y print(f\" x  +  y  =  z \") print(f\"{x} + {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") # mathematically allowed  24 + 37.4 + 2j <pre> x  +  y  =  z \n24 + (37.4+2j) = (61.4+2j)\ntype of x: &lt;class 'int'&gt;\ntype of y: &lt;class 'complex'&gt;\ntype of z: &lt;class 'complex'&gt;\n</pre> Out[12]: <pre>(61.4+2j)</pre> In\u00a0[13]: Copied! <pre># float + complex = complex\nx = 24.4\ny = 37.4 + 2j\nz = x + y\nprint(f\" x  +  y  =  z \")\nprint(f\"{x} + {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n# mathematically allowed\n\n24.4 + 37.4 + 2j\n</pre> # float + complex = complex x = 24.4 y = 37.4 + 2j z = x + y print(f\" x  +  y  =  z \") print(f\"{x} + {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") # mathematically allowed  24.4 + 37.4 + 2j <pre> x  +  y  =  z \n24.4 + (37.4+2j) = (61.8+2j)\ntype of x: &lt;class 'float'&gt;\ntype of y: &lt;class 'complex'&gt;\ntype of z: &lt;class 'complex'&gt;\n</pre> Out[13]: <pre>(61.8+2j)</pre> In\u00a0[14]: Copied! <pre>age = input(\"Age: ?\")\nN = 5 # int\nprint(f\"BEFORE: type of age variable: {type(age)}\")\nage = int(age)\nprint(f\"AFTER: type of age variable: {type(age)}\")\n\nprint(f\"type of N variable: {type(N)}\")\n\nprint(f\"Age of the user after {N} years will be: {age + N}\")\n</pre> age = input(\"Age: ?\") N = 5 # int print(f\"BEFORE: type of age variable: {type(age)}\") age = int(age) print(f\"AFTER: type of age variable: {type(age)}\")  print(f\"type of N variable: {type(N)}\")  print(f\"Age of the user after {N} years will be: {age + N}\") <pre>Age: ?24\nBEFORE: type of age variable: &lt;class 'str'&gt;\nAFTER: type of age variable: &lt;class 'int'&gt;\ntype of N variable: &lt;class 'int'&gt;\nAge of the user after 5 years will be: 29\n</pre> <p>The need for type-casting arises when you want to ensure that your data is compatible with specific functions or operations (e.g. converting a variable to a string before concatenating it to another string). Type casting can also be useful when you want to make sure that a variable contains the right type of data.</p> In\u00a0[15]: Copied! <pre># str + float\nx = \"24.4\"\ny = 37.4\nz = x + y\nprint(f\" x  +  y  =  z \")\nprint(f\"{x} + {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n# mathematically not allowed\n</pre> # str + float x = \"24.4\" y = 37.4 z = x + y print(f\" x  +  y  =  z \") print(f\"{x} + {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") # mathematically not allowed <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[15], line 4\n      2 x = \"24.4\"\n      3 y = 37.4\n----&gt; 4 z = x + y\n      5 print(f\" x  +  y  =  z \")\n      6 print(f\"{x} + {y} = {z}\")\n\nTypeError: can only concatenate str (not \"float\") to str</pre> In\u00a0[16]: Copied! <pre># str + float\nx = float(\"24.4\")\ny = 37.4\nz = x + y\nprint(f\" x  +  y  =  z \")\nprint(f\"{x} + {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n# Now mathematically allowed\n\nfloat(\"24.4\") + 37.4\n</pre> # str + float x = float(\"24.4\") y = 37.4 z = x + y print(f\" x  +  y  =  z \") print(f\"{x} + {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") # Now mathematically allowed  float(\"24.4\") + 37.4 <pre> x  +  y  =  z \n24.4 + 37.4 = 61.8\ntype of x: &lt;class 'float'&gt;\ntype of y: &lt;class 'float'&gt;\ntype of z: &lt;class 'float'&gt;\n</pre> Out[16]: <pre>61.8</pre> In\u00a0[17]: Copied! <pre># str + float\nx = int(float(\"24.4\"))\ny = 37.4\nz = x + y\nprint(\" x  +  y  =  z \")\nprint(f\"{x} + {y} = {z}\")\nprint(f\"type of x: {type(x)}\")\nprint(f\"type of y: {type(y)}\")\nprint(f\"type of z: {type(z)}\")\n</pre> # str + float x = int(float(\"24.4\")) y = 37.4 z = x + y print(\" x  +  y  =  z \") print(f\"{x} + {y} = {z}\") print(f\"type of x: {type(x)}\") print(f\"type of y: {type(y)}\") print(f\"type of z: {type(z)}\") <pre> x  +  y  =  z \n24 + 37.4 = 61.4\ntype of x: &lt;class 'int'&gt;\ntype of y: &lt;class 'float'&gt;\ntype of z: &lt;class 'float'&gt;\n</pre>"},{"location":"notebooks/004-type-conversions-user-input/notes/#user-input-data-type-castingconversions","title":"User input, Data-type casting/conversions \ud83d\udd0d\u00b6","text":""},{"location":"notebooks/004-type-conversions-user-input/notes/#user-input-in-python","title":"User input in Python. \ud83d\udce5\u00b6","text":"<p>In Python, you can use the <code>input()</code> function to take input from the user.</p> <p>The <code>input()</code> function takes an optional string argument which is shown as a prompt to the user.</p> <p>After taking input, the <code>input()</code> function returns the value entered by the user as a <code>str</code> (i.e. string).</p> <p>For example:</p>"},{"location":"notebooks/004-type-conversions-user-input/notes/#handling-various-data-types-and-its-conversion","title":"Handling various data-types and it's conversion \ud83d\udd27\u00b6","text":"<p>The method of converting a Python variable's data type into a certain data type in order to perform the required operation by users. There are two types of it in Python: Implicit Type Conversion and Explicit Type Conversion.</p>"},{"location":"notebooks/004-type-conversions-user-input/notes/#implicit-conversions-aka-data-type-conversion","title":"Implicit conversions aka Data-type conversion \ud83d\udd04\u00b6","text":"<p>In this method, Python automatically converts the data type into another data type. Users don\u2019t have to involve in this process. For example:</p>"},{"location":"notebooks/004-type-conversions-user-input/notes/#explicit-conversions-aka-data-type-casting","title":"Explicit conversions aka Data-type casting \ud83c\udf9b\ufe0f\u00b6","text":"<p>In this method, Python needs user involvement to convert the variable data type into the required data type. Mainly, type casting can be done with these data type functions: <code>int()</code>, <code>float()</code>, and <code>str()</code> and more as per requirement. For example:</p>"},{"location":"notebooks/005-numbers/notes/","title":"Numbers in Python \ud83d\udd22","text":"<p>Author: SUNNY BHAVEEN CHANDRA</p> <p>For more information -</p> <ul> <li><p>[1] Python notes- https://c17hawke.github.io/Python/</p> </li> <li><p>[2] Python YouTube Playlist- https://youtube.com/playlist?list=PLrdaCCBhU_hnxIzB7EJlY-pfYOMGRycAK</p> </li> </ul> In\u00a0[1]: Copied! <pre>x = 4\ny = 0\nz = -3\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 4 y = 0 z = -3 print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=4 | type: &lt;class 'int'&gt;\nValue: y=0 | type: &lt;class 'int'&gt;\nValue: z=-3 | type: &lt;class 'int'&gt;\n</pre> In\u00a0[2]: Copied! <pre>x = 10000000\ny = 10_000_000 # 10,000,000\nz = 10,000,000 # avoid this\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 10000000 y = 10_000_000 # 10,000,000 z = 10,000,000 # avoid this print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=10000000 | type: &lt;class 'int'&gt;\nValue: y=10000000 | type: &lt;class 'int'&gt;\nValue: z=(10, 0, 0) | type: &lt;class 'tuple'&gt;\n</pre> In\u00a0[3]: Copied! <pre>x = 4.0\ny = 0.0\nz = -3.3\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 4.0 y = 0.0 z = -3.3 print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=4.0 | type: &lt;class 'float'&gt;\nValue: y=0.0 | type: &lt;class 'float'&gt;\nValue: z=-3.3 | type: &lt;class 'float'&gt;\n</pre> In\u00a0[4]: Copied! <pre>x = 10000000.00\ny = 10_000_000.00\nz = 10,000,000.00 # avoid this as it returns tuple\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 10000000.00 y = 10_000_000.00 z = 10,000,000.00 # avoid this as it returns tuple print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=10000000.0 | type: &lt;class 'float'&gt;\nValue: y=10000000.0 | type: &lt;class 'float'&gt;\nValue: z=(10, 0, 0.0) | type: &lt;class 'tuple'&gt;\n</pre> <p>They can also be written in scientific notation</p> In\u00a0[5]: Copied! <pre>#   - scientific notation x &gt;&gt; 1 and x &gt;= 0 (positive)\n# eg: distance between earth and sun\nx = 12_000.00 \ny = 1.2 * 10 ** 4\nz = 1.2e4\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> #   - scientific notation x &gt;&gt; 1 and x &gt;= 0 (positive) # eg: distance between earth and sun x = 12_000.00  y = 1.2 * 10 ** 4 z = 1.2e4 print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=12000.0 | type: &lt;class 'float'&gt;\nValue: y=12000.0 | type: &lt;class 'float'&gt;\nValue: z=12000.0 | type: &lt;class 'float'&gt;\n</pre> In\u00a0[6]: Copied! <pre>x = 12_000 \ny = int(1.2 * 10 ** 4)\nz = int(1.2e4)\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 12_000  y = int(1.2 * 10 ** 4) z = int(1.2e4) print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=12000 | type: &lt;class 'int'&gt;\nValue: y=12000 | type: &lt;class 'int'&gt;\nValue: z=12000 | type: &lt;class 'int'&gt;\n</pre> In\u00a0[7]: Copied! <pre>#   - scientific notation x &lt;&lt; 1 and x &gt;= 0 (positive)\n# eg: radius of an Hydrogen atom\nx = 0.00012\ny = 1.2 * 10 ** -4\nz = 1.2e-4\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> #   - scientific notation x &lt;&lt; 1 and x &gt;= 0 (positive) # eg: radius of an Hydrogen atom x = 0.00012 y = 1.2 * 10 ** -4 z = 1.2e-4 print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=0.00012 | type: &lt;class 'float'&gt;\nValue: y=0.00012 | type: &lt;class 'float'&gt;\nValue: z=0.00012 | type: &lt;class 'float'&gt;\n</pre> In\u00a0[8]: Copied! <pre>x = 0.00012\ny = 1.2 * 10 ** -4\nz = 1.2E-4\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 0.00012 y = 1.2 * 10 ** -4 z = 1.2E-4 print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=0.00012 | type: &lt;class 'float'&gt;\nValue: y=0.00012 | type: &lt;class 'float'&gt;\nValue: z=0.00012 | type: &lt;class 'float'&gt;\n</pre> In\u00a0[9]: Copied! <pre>x = 1e3 # equivalent to 1000\ny = 1.5e2 # equivalent to 150\nz = 3E-2 # equivalent to 0.03\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\n</pre> x = 1e3 # equivalent to 1000 y = 1.5e2 # equivalent to 150 z = 3E-2 # equivalent to 0.03 print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") <pre>Value: x=1000.0 | type: &lt;class 'float'&gt;\nValue: y=150.0 | type: &lt;class 'float'&gt;\nValue: z=0.03 | type: &lt;class 'float'&gt;\n</pre> <p>Scientific notation is often used when working with very large or very small numbers, as it provides a more concise way to represent these values.</p> In\u00a0[10]: Copied! <pre>x = 3 + 4j\ny = -2 - 3j\nz = 1j # equivalent to 0 + 1j, aka perfect complex numbers\na = 0j\nb = 1+0j # complex number with real part only\nprint(f\"Value: x={x} | type: {type(x)}\")\nprint(f\"Value: y={y} | type: {type(y)}\")\nprint(f\"Value: z={z} | type: {type(z)}\")\nprint(f\"Value: a={a} | type: {type(a)}\")\nprint(f\"Value: b={b} | type: {type(b)}\")\n</pre> x = 3 + 4j y = -2 - 3j z = 1j # equivalent to 0 + 1j, aka perfect complex numbers a = 0j b = 1+0j # complex number with real part only print(f\"Value: x={x} | type: {type(x)}\") print(f\"Value: y={y} | type: {type(y)}\") print(f\"Value: z={z} | type: {type(z)}\") print(f\"Value: a={a} | type: {type(a)}\") print(f\"Value: b={b} | type: {type(b)}\") <pre>Value: x=(3+4j) | type: &lt;class 'complex'&gt;\nValue: y=(-2-3j) | type: &lt;class 'complex'&gt;\nValue: z=1j | type: &lt;class 'complex'&gt;\nValue: a=0j | type: &lt;class 'complex'&gt;\nValue: b=(1+0j) | type: &lt;class 'complex'&gt;\n</pre> In\u00a0[11]: Copied! <pre>x = -5\nresult = abs(x)\nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> x = -5 result = abs(x) print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: -5, AFTER: 5\n</pre> In\u00a0[12]: Copied! <pre>x = 5\nresult = abs(x)\nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> x = 5 result = abs(x) print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: 5, AFTER: 5\n</pre> In\u00a0[13]: Copied! <pre>x = 10\ny = 3\nquotient, remainder = divmod(x, y) # q is now 3, r is now 1\nprint(f\"{x}/{y}, quotient: {quotient}, reminder: {remainder}\")\n</pre> x = 10 y = 3 quotient, remainder = divmod(x, y) # q is now 3, r is now 1 print(f\"{x}/{y}, quotient: {quotient}, reminder: {remainder}\") <pre>10/3, quotient: 3, reminder: 1\n</pre> In\u00a0[14]: Copied! <pre>x = 10\ny = 5\n\nquotient, reminder = divmod(x, y)\nprint(f\"{x}/{y}, quotient: {quotient}, reminder: {reminder}\")\n</pre> x = 10 y = 5  quotient, reminder = divmod(x, y) print(f\"{x}/{y}, quotient: {quotient}, reminder: {reminder}\") <pre>10/5, quotient: 2, reminder: 0\n</pre> In\u00a0[15]: Copied! <pre># even number test, remainder = 0\nx = 10\ny = 2\n\nquotient, reminder = divmod(x, y)\nprint(f\"{x}/{y}, quotient: {quotient}, reminder: {reminder}\")\n</pre> # even number test, remainder = 0 x = 10 y = 2  quotient, reminder = divmod(x, y) print(f\"{x}/{y}, quotient: {quotient}, reminder: {reminder}\") <pre>10/2, quotient: 5, reminder: 0\n</pre> In\u00a0[16]: Copied! <pre># odd number test, remainder not equal 0\nx = 11\ny = 2\n\nquotient, reminder = divmod(x, y)\nprint(f\"{x}/{y}, quotient: {quotient}, reminder: {reminder}\")\n</pre> # odd number test, remainder not equal 0 x = 11 y = 2  quotient, reminder = divmod(x, y) print(f\"{x}/{y}, quotient: {quotient}, reminder: {reminder}\") <pre>11/2, quotient: 5, reminder: 1\n</pre> In\u00a0[17]: Copied! <pre>x = 2\ny = 3\nz = pow(x, y)\nprint(f\"{x} to the power of {y} = {z}\")\n</pre> x = 2 y = 3 z = pow(x, y) print(f\"{x} to the power of {y} = {z}\") <pre>2 to the power of 3 = 8\n</pre> <p>without specifying upto what decimal point you want to round off</p> In\u00a0[18]: Copied! <pre>x = 3.14159\nresult = round(x) # y is now 3\nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> x = 3.14159 result = round(x) # y is now 3 print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: 3.14159, AFTER: 3\n</pre> In\u00a0[19]: Copied! <pre>x = 3.94159\nresult = round(x) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> x = 3.94159 result = round(x)  print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: 3.94159, AFTER: 4\n</pre> In\u00a0[20]: Copied! <pre>x = 3.9\nresult = round(x) # y is now 3\nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> x = 3.9 result = round(x) # y is now 3 print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: 3.9, AFTER: 4\n</pre> In\u00a0[21]: Copied! <pre>x = 3.4\nresult = round(x) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n\nx = 3.5\nresult = round(x) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> x = 3.4 result = round(x)  print(f\"BEFORE: {x}, AFTER: {result}\")  x = 3.5 result = round(x)  print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: 3.4, AFTER: 3\nBEFORE: 3.5, AFTER: 4\n</pre> In\u00a0[22]: Copied! <pre># round upto one decimal places\nx = 3.45\nresult = round(x, 1) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n\n\n# round upto one decimal places\nx = 3.43\nresult = round(x, 1) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> # round upto one decimal places x = 3.45 result = round(x, 1)  print(f\"BEFORE: {x}, AFTER: {result}\")   # round upto one decimal places x = 3.43 result = round(x, 1)  print(f\"BEFORE: {x}, AFTER: {result}\")  <pre>BEFORE: 3.45, AFTER: 3.5\nBEFORE: 3.43, AFTER: 3.4\n</pre> In\u00a0[23]: Copied! <pre># round upto two decimal places\nx = 3.44567\nresult = round(x, 2) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> # round upto two decimal places x = 3.44567 result = round(x, 2)  print(f\"BEFORE: {x}, AFTER: {result}\")  <pre>BEFORE: 3.44567, AFTER: 3.45\n</pre> In\u00a0[24]: Copied! <pre># round upto three decimal places\nx = 3.44567\nresult = round(x, 3) \nprint(f\"BEFORE: {x}, AFTER: {result}\")\n</pre> # round upto three decimal places x = 3.44567 result = round(x, 3)  print(f\"BEFORE: {x}, AFTER: {result}\") <pre>BEFORE: 3.44567, AFTER: 3.446\n</pre> In\u00a0[25]: Copied! <pre># avoid using it not a proper round up\nx = 3.6\nresult = int(x) # another way but wrong way to round up\nprint(f\"using 'int' BEFORE: {x}, AFTER: {result}\")\n\nresult = round(x) # another way but correct way to round up\nprint(f\"using 'round' BEFORE: {x}, AFTER: {result}\")\n</pre> # avoid using it not a proper round up x = 3.6 result = int(x) # another way but wrong way to round up print(f\"using 'int' BEFORE: {x}, AFTER: {result}\")  result = round(x) # another way but correct way to round up print(f\"using 'round' BEFORE: {x}, AFTER: {result}\") <pre>using 'int' BEFORE: 3.6, AFTER: 3\nusing 'round' BEFORE: 3.6, AFTER: 4\n</pre>"},{"location":"notebooks/005-numbers/notes/#numbers-in-python","title":"Numbers in Python \ud83d\udd22\u00b6","text":"<p>Python supports several types of numbers, including integers, floating point numbers, and complex numbers.</p>"},{"location":"notebooks/005-numbers/notes/#integers","title":"Integers \ud83d\udd22\u00b6","text":"<p>Integers are whole numbers that can be positive, negative, or zero. For example:</p>"},{"location":"notebooks/005-numbers/notes/#large-integers-","title":"Large integers \ud83d\udd0d-\u00b6","text":"<p>eg currency 10,000,000 10Mn dollars</p>"},{"location":"notebooks/005-numbers/notes/#floats","title":"Floats \ud83d\udd1f\u00b6","text":"<p>Floats are numbers with a decimal point.</p>"},{"location":"notebooks/005-numbers/notes/#large-float-values","title":"Large float values \ud83d\udd0d\u00b6","text":""},{"location":"notebooks/005-numbers/notes/#scientific-notation","title":"Scientific Notation \ud83d\udd2c\u00b6","text":"<p>Numbers can also be represented in scientific notation using the <code>e</code> or <code>E</code> character to indicate the power of 10. For example, <code>1e3</code> represents <code>1 x 10^3</code>, which is equivalent to <code>1000</code>. Here's an example of using scientific notation in Python:</p>"},{"location":"notebooks/005-numbers/notes/#complex-numbers","title":"Complex Numbers \ud83d\udd22\u00b6","text":"<p>Complex numbers are numbers with a real and imaginary part, written as <code>x + yj</code>, where <code>x</code> is the real part and <code>y</code> is the imaginary part. For example:</p>"},{"location":"notebooks/005-numbers/notes/#built-in-functions-for-working-with-numbers","title":"Built-in Functions for Working with Numbers \ud83d\udd27\u00b6","text":"<p>Python also provides several built-in functions for working with numbers -</p>"},{"location":"notebooks/005-numbers/notes/#absolute-absx","title":"absolute <code>abs(x)</code>\u00b6","text":"<p>Returns the absolute value of a number.</p> <p>$$ abs(x) = f(x) = \\left\\{\\begin{matrix} x &amp; x \\ge 0\\\\  -x &amp; x &lt; 0 \\end{matrix}\\right. $$</p> <p>For example:</p>"},{"location":"notebooks/005-numbers/notes/#division-and-modulus-divmodx-y","title":"division and modulus - <code>divmod(x, y)</code>\u00b6","text":"<p>Returns the quotient and remainder when dividing <code>x</code> by <code>y</code>. For example:</p>"},{"location":"notebooks/005-numbers/notes/#power-powx-y","title":"power - <code>pow(x, y)</code>\u00b6","text":"<p>Returns <code>x</code> raised to the power of <code>y</code>. For example:</p>"},{"location":"notebooks/005-numbers/notes/#round-roundx-n","title":"round - <code>round(x[, n])</code>\u00b6","text":"<p>Rounds a floating point number to the nearest integer. If <code>n</code> is provided, rounds to <code>n</code> digits after the decimal point. For example:</p>"}]}